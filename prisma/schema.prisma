generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model balance {
  payment_id      Int      @id @default(autoincrement())
  patient_id      Int
  date            DateTime @db.Date
  total_cost      Decimal  @db.Decimal(10, 2)
  amount_paid     Decimal  @db.Decimal(10, 2)
  balance         Decimal  @db.Decimal(10, 2)
  remarks         String   @db.VarChar(255)
  side_payment_id Int
}

model clinic_users {
  user_id        Int                       @id @default(autoincrement())
  name           String                    @db.VarChar(255)
  username       String                    @db.VarChar(128)
  password       String                    @db.VarChar(128)
  occupation     clinic_users_occupation
  user_specialty String                    @db.VarChar(128)
  access_level   clinic_users_access_level
  email          String                    @db.VarChar(128)
  contact        String                    @db.VarChar(11)
}

model dental_service_record {
  dental_service_record_id Int      @id @default(autoincrement())
  patient_id               Int
  doctor_id                Int
  date                     DateTime @db.Date
  diagnosis                String   @db.VarChar(128)
  treatment                String   @db.VarChar(128)
  tooth_no                 Int
  remarks                  String   @db.VarChar(255)
}

model image_attachments {
  image_id        Int                               @id @default(autoincrement())
  patient_id      Int
  image_url       String                            @db.VarChar(255)
  attachment_xray image_attachments_attachment_xray
}

model messages {
  message_id Int             @id @default(autoincrement())
  to_id      Int
  from_id    Int
  time_sent  DateTime        @db.DateTime(0)
  subject_id Int
  message    String          @db.Text
  opened     messages_opened
}

model odontogram {
  note_id          Int                 @id @default(autoincrement())
  patient_id       Int
  tooth_no         Int
  date             DateTime            @db.Date
  doc_id           Int
  diagnosis_observ String              @db.Text
  treatment        String              @db.Text
  remarks          String              @db.Text
  position         odontogram_position
  color            String              @db.VarChar(128)
}

model patient_record {
  patient_id          Int                              @id @default(autoincrement())
  patient_name        String                           @db.VarChar(100)
  patient_profile_pic String                           @db.VarChar(128)
  patient_address     String                           @db.VarChar(50)
  patient_email       String                           @db.VarChar(50)
  patient_contact     String                           @db.VarChar(15)
  date_of_birth       DateTime                         @db.Date
  patient_age         Int
  patient_sex         patient_record_patient_sex
  patient_status      patient_record_patient_status
  patient_occupation  String                           @db.VarChar(50)
  patient_reference   String                           @db.VarChar(50)
  reference_contact   String                           @db.VarChar(128)
  diabetes            patient_record_diabetes
  bleeding_tendency   patient_record_bleeding_tendency
  drug_sensitivity    patient_record_drug_sensitivity
  heart_condition     patient_record_heart_condition
  rheumatic_fever     patient_record_rheumatic_fever
  blood_pressure      patient_record_blood_pressure
  remarks             String                           @db.VarChar(500)
}

model scheduled_appointments {
  id                  Int                             @id @default(autoincrement())
  patient_id          Int
  doc_id              Int
  date_of_appointment DateTime                        @db.Date
  start_time          DateTime                        @default(dbgenerated("('00:00:00')")) @db.Time(0)
  waitlist            scheduled_appointments_waitlist
  event               String                          @db.VarChar(255)
  end_time            DateTime                        @default(dbgenerated("('00:00:00')")) @db.Time(0)
}

model supplies_inventory {
  supply_id         Int    @id @default(autoincrement())
  supply_name       String @db.VarChar(255)
  supply_quantity   Int
  supplied_value    Int
  supplier          String @db.VarChar(255)
  history_supply_id Int
}

model tooth_condition {
  condition_id   Int    @id @default(autoincrement())
  patient_id     Int
  tooth_id       Int
  condition_name String @db.VarChar(128)
  tooth_center   String @db.VarChar(50)
  tooth_front    String @db.VarChar(50)
  tooth_back     String @db.VarChar(50)
  tooth_left     String @db.VarChar(50)
  tooth_right    String @db.VarChar(50)
}

model treatments {
  treatment_id   Int                 @id @default(autoincrement())
  treatment_name String              @db.VarChar(128)
  is_abbrv       treatments_is_abbrv
}

model auth_group {
  id                     Int                      @id @default(autoincrement())
  name                   String                   @unique(map: "name") @db.VarChar(150)
  auth_group_permissions auth_group_permissions[]
  auth_user_groups       auth_user_groups[]
}

model auth_group_permissions {
  id              BigInt          @id @default(autoincrement())
  group_id        Int
  permission_id   Int
  auth_permission auth_permission @relation(fields: [permission_id], references: [id], onUpdate: Restrict, map: "auth_group_permissio_permission_id_84c5c92e_fk_auth_perm")
  auth_group      auth_group      @relation(fields: [group_id], references: [id], onUpdate: Restrict, map: "auth_group_permissions_group_id_b120cbf9_fk_auth_group_id")

  @@unique([group_id, permission_id], map: "auth_group_permissions_group_id_permission_id_0cd325b0_uniq")
  @@index([permission_id], map: "auth_group_permissio_permission_id_84c5c92e_fk_auth_perm")
}

model auth_permission {
  id                         Int                          @id @default(autoincrement())
  name                       String                       @db.VarChar(255)
  content_type_id            Int
  codename                   String                       @db.VarChar(100)
  auth_group_permissions     auth_group_permissions[]
  django_content_type        django_content_type          @relation(fields: [content_type_id], references: [id], onUpdate: Restrict, map: "auth_permission_content_type_id_2f476e4b_fk_django_co")
  auth_user_user_permissions auth_user_user_permissions[]

  @@unique([content_type_id, codename], map: "auth_permission_content_type_id_codename_01ab375a_uniq")
}

model auth_user {
  id                         Int                          @id @default(autoincrement())
  password                   String                       @db.VarChar(128)
  last_login                 DateTime?                    @db.DateTime(6)
  is_superuser               Boolean
  username                   String                       @unique(map: "username") @db.VarChar(150)
  first_name                 String                       @db.VarChar(150)
  last_name                  String                       @db.VarChar(150)
  email                      String                       @db.VarChar(254)
  is_staff                   Boolean
  is_active                  Boolean
  date_joined                DateTime                     @db.DateTime(6)
  auth_user_groups           auth_user_groups[]
  auth_user_user_permissions auth_user_user_permissions[]
  django_admin_log           django_admin_log[]
}

model auth_user_groups {
  id         BigInt     @id @default(autoincrement())
  user_id    Int
  group_id   Int
  auth_group auth_group @relation(fields: [group_id], references: [id], onUpdate: Restrict, map: "auth_user_groups_group_id_97559544_fk_auth_group_id")
  auth_user  auth_user  @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "auth_user_groups_user_id_6a12ed8b_fk_auth_user_id")

  @@unique([user_id, group_id], map: "auth_user_groups_user_id_group_id_94350c0c_uniq")
  @@index([group_id], map: "auth_user_groups_group_id_97559544_fk_auth_group_id")
}

model auth_user_user_permissions {
  id              BigInt          @id @default(autoincrement())
  user_id         Int
  permission_id   Int
  auth_permission auth_permission @relation(fields: [permission_id], references: [id], onUpdate: Restrict, map: "auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm")
  auth_user       auth_user       @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "auth_user_user_permissions_user_id_a95ead1b_fk_auth_user_id")

  @@unique([user_id, permission_id], map: "auth_user_user_permissions_user_id_permission_id_14a6b632_uniq")
  @@index([permission_id], map: "auth_user_user_permi_permission_id_1fbb5f2c_fk_auth_perm")
}

model django_admin_log {
  id                  Int                  @id @default(autoincrement())
  action_time         DateTime             @db.DateTime(6)
  object_id           String?              @db.LongText
  object_repr         String               @db.VarChar(200)
  action_flag         Int                  @db.UnsignedSmallInt
  change_message      String               @db.LongText
  content_type_id     Int?
  user_id             Int
  django_content_type django_content_type? @relation(fields: [content_type_id], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "django_admin_log_content_type_id_c4bce8eb_fk_django_co")
  auth_user           auth_user            @relation(fields: [user_id], references: [id], onUpdate: Restrict, map: "django_admin_log_user_id_c564eba6_fk_auth_user_id")

  @@index([content_type_id], map: "django_admin_log_content_type_id_c4bce8eb_fk_django_co")
  @@index([user_id], map: "django_admin_log_user_id_c564eba6_fk_auth_user_id")
}

model django_content_type {
  id               Int                @id @default(autoincrement())
  app_label        String             @db.VarChar(100)
  model            String             @db.VarChar(100)
  auth_permission  auth_permission[]
  django_admin_log django_admin_log[]

  @@unique([app_label, model], map: "django_content_type_app_label_model_76bd3d3b_uniq")
}

model django_migrations {
  id      BigInt   @id @default(autoincrement())
  app     String   @db.VarChar(255)
  name    String   @db.VarChar(255)
  applied DateTime @db.DateTime(6)
}

model django_session {
  session_key  String   @id @db.VarChar(40)
  session_data String   @db.LongText
  expire_date  DateTime @db.DateTime(6)

  @@index([expire_date], map: "django_session_expire_date_a5c62663")
}

enum treatments_is_abbrv {
  true  @map("1")
  false @map("0")
}

enum image_attachments_attachment_xray {
  false @map("0")
  true  @map("1")
}

enum clinic_users_occupation {
  Doctor
  Secretary
  Admin
}

enum scheduled_appointments_waitlist {
  true  @map("1")
  false @map("0")
}

enum clinic_users_access_level {
  lv1 @map("1")
  lv2 @map("2")
  lv3 @map("3")
}

enum messages_opened {
  false @map("0")
  true  @map("1")
}

enum odontogram_position {
  Center
  Front
  Back
  Left
  Right
}

enum patient_record_patient_sex {
  M
  F
}

enum patient_record_patient_status {
  Married
  Single
  Divorced
  Widowed
}

enum patient_record_diabetes {
  false @map("0")
  true  @map("1")
}

enum patient_record_bleeding_tendency {
  false @map("0")
  true  @map("1")
}

enum patient_record_drug_sensitivity {
  false @map("0")
  true  @map("1")
}

enum patient_record_heart_condition {
  false @map("0")
  true  @map("1")
}

enum patient_record_rheumatic_fever {
  false @map("0")
  true  @map("1")
}

enum patient_record_blood_pressure {
  false @map("0")
  true  @map("1")
}
